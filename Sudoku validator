#include <stdio.h>
#include <stdbool.h>

// Function to check if a row is valid (no duplicates)
bool isValidRow(int grid[9][9], int row) {
    bool seen[9] = {false};  // To track digits from 1 to 9

    for (int col = 0; col < 9; col++) {
        int num = grid[row][col] - 1; // Convert 1-9 to 0-8 for indexing
        if (num < 0 || num >= 9 || seen[num]) {
            return false;  // Invalid number or duplicate
        }
        seen[num] = true;
    }
    return true;
}

// Function to check if a column is valid (no duplicates)
bool isValidColumn(int grid[9][9], int col) {
    bool seen[9] = {false};  // To track digits from 1 to 9

    for (int row = 0; row < 9; row++) {
        int num = grid[row][col] - 1; // Convert 1-9 to 0-8 for indexing
        if (num < 0 || num >= 9 || seen[num]) {
            return false;  // Invalid number or duplicate
        }
        seen[num] = true;
    }
    return true;
}

// Function to check if a 3x3 subgrid is valid (no duplicates)
bool isValidSubgrid(int grid[9][9], int startRow, int startCol) {
    bool seen[9] = {false};  // To track digits from 1 to 9

    for (int row = 0; row < 3; row++) {
        for (int col = 0; col < 3; col++) {
            int num = grid[startRow + row][startCol + col] - 1; // Convert 1-9 to 0-8 for indexing
            if (num < 0 || num >= 9 || seen[num]) {
                return false;  // Invalid number or duplicate
            }
            seen[num] = true;
        }
    }
    return true;
}

// Function to validate the entire Sudoku grid
bool isValidSudoku(int grid[9][9]) {
    // Check rows
    for (int row = 0; row < 9; row++) {
        if (!isValidRow(grid, row)) {
            return false;
        }
    }

    // Check columns
    for (int col = 0; col < 9; col++) {
        if (!isValidColumn(grid, col)) {
            return false;
        }
    }

    // Check 3x3 subgrids
    for (int row = 0; row < 9; row += 3) {
        for (int col = 0; col < 9; col += 3) {
            if (!isValidSubgrid(grid, row, col)) {
                return false;
            }
        }
    }

    return true;  // If no issues found, the Sudoku is valid
}

int main() {
    // Example Sudoku grid (valid)
    int grid[9][9] = {
        {5, 3, 4, 6, 7, 8, 9, 1, 2},
        {6, 7, 2, 1, 9, 5, 3, 4, 8},
        {1, 9, 8, 3, 4, 2, 5, 6, 7},
        {8, 5, 9, 7, 6, 1, 4, 2, 3},
        {4, 2, 6, 8, 5, 3, 7, 9, 1},
        {7, 1, 3, 9, 2, 4, 8, 5, 6},
        {9, 6, 1, 5, 3, 7, 2, 8, 4},
        {2, 8, 7, 4, 1, 9, 6, 3, 5},
        {3, 4, 5, 2, 8, 6, 1, 7, 9}
    };

    if (isValidSudoku(grid)) {
        printf("The Sudoku puzzle is valid.\n");
    } else {
        printf("The Sudoku puzzle is invalid.\n");
    }

    return 0;
}
